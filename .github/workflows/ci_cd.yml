name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      run: |
        pip install poetry
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Run type checking
      run: |
        poetry run mypy src
    
    - name: Run tests
      run: |
        poetry run pytest tests/ --cov=src --cov-report=xml
    
    - name: Check code formatting
      run: |
        poetry run black --check src tests
    
    - name: Lint with flake8
      run: |
        poetry run flake8 src tests
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        files: ./coverage.xml
        verbose: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install poetry
        poetry install
    
    - name: Run Bandit security linter
      run: |
        poetry run bandit -r src

  release:
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install poetry
    
    - name: Build package
      run: |
        poetry build
    
    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry publish

  documentation:
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install poetry
        poetry install
    
    - name: Generate documentation
      run: |
        poetry run sphinx-build -b html docs docs/_build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build
